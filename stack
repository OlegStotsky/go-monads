

type Stack interface {
    Head() (int, error)
    Tail() (Stack, error)
}

type Cons struct {
    head int
    tail Stack
}

type Nil struct{}

func (cons Cons) Head() (int, error) { return cons.head, nil }
func (cons Cons) Tail() (Stack, error) { return cons.tail, nil }

func (cons Nil) Head() (int, error) { return 0, errors.New("From nil") }
func (cons Nil) Tail() (Stack, error) { return nil, errors.New("From nil") }

func Push(x int) State(Stack, Unit) {
   curState := Get(Stack)()
   wrap := func(s Stack) Stack {
        result := Cons{head: x, tail: s}
	return result
   }

   updatedState := Map(Stack, Stack, Stack)(curState, wrap)
   return FlatMap(Stack, Stack, Unit)(updatedState, Put(Stack, Stack))
}



func main(){
    state := bindI(Push(3), Push(2))
    _, s := state.RunState(Nil{})
    a, _ := s.Head()
    tail, _ := s.Tail()
    b, _ := tail.Head()
    fmt.Println(a)
    fmt.Println(b)
}