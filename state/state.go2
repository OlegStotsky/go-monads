package state

import . "github.com/olegstotsky/go-monads"

//Represent function func (S) (A, S), where S is state, A is result
//RunState run state function with given state
type State(type S, A) interface {
    RunState(S) (A, S)
}

type stateImpl(type S, A) struct {
    f func(S) (A, S)
}

func (s StateImpl(S, A)) RunState(state S) (A, S) {
    return s.f(state)
}

//Create State with given value
func Return(type S, A)(x A) State(S, A){
     return stateImpl(S, A){f: func(s S) (A, S) { return x, s }}
}

//Apply given function to result of handling given state
func Map(type S, A, B)(s State(S, A), mapF Func(A, B)) State(S, B) {
    return StateImpl(S, B){f: func(state S) (B, S) {
	    a, newState := s.RunState(state)
	    return mapF(a), newState
    }}
}

//Apply given function to result of handling given state and produce new state
func FlatMap(type S, A, B)(s State(S, A), mapF Func(A, State(S, B))) State(S, B) {
     return stateImpl(S, B){f: func(state S) (B, S) {
	    a, newState := s.RunState(state)
	    result := mapF(a)
	    return result.RunState(newState)
     }}
}

//Give state as value of State
func Get(type S)() State(S, S) {
     return stateImpl(S, S){f: func(state S) (S, S) {
         return state, state
     }}
}

//Put new state to State
func Put(type S)(newState S) State(S, Unit){
     return stateImpl(S, Unit){f: func(S) (Unit, S) { return struct{}{}, newState }}
}

//Analogue of flatMap with ignoring value of base State
func bindI(type S, A, B)(s State(S, A), s2 State(S, B)) State(S, B) {
     return stateImpl(S, B){f: func(state S) (B, S) {
	     _, newState := s.RunState(state)
	     return s2.RunState(newState)
     }}
}